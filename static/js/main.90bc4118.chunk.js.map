{"version":3,"sources":["components/Button/index.tsx","components/Display/index.tsx","components/Calculator/index.tsx","App.tsx","index.tsx"],"names":["Button","label","rest","Display","value","className","Calculator","useState","displayValue","setDisplayValue","firstOperand","setFirstOperand","waitingForSecondOperand","setWaitingForSecondOperand","operator","setOperator","handleOperation","nextOperator","inputValue","parseFloat","isNaN","result","secondOperand","calculate","toFixed","String","length","handleAddDigit","digit","onClick","numberSignChanged","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90bc4118.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes } from \"react\";\r\n\r\nimport \"./styles.css\";\r\n\r\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n  label: string;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ label, ...rest }) => {\r\n  return <button {...rest}>{label}</button>;\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nimport \"./styles.css\";\r\n\r\ninterface DisplayProps {\r\n  value: string;\r\n}\r\n\r\nconst Display: React.FC<DisplayProps> = ({ value }) => {\r\n  return <div className=\"display\">{value}</div>;\r\n};\r\n\r\nexport default Display;\r\n","import React, { useState } from \"react\";\r\n\r\nimport Button from \"../Button\";\r\nimport Display from \"../Display\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction Calculator() {\r\n  const [displayValue, setDisplayValue] = useState(\"0\");\r\n  const [firstOperand, setFirstOperand] = useState(\"\");\r\n  const [waitingForSecondOperand, setWaitingForSecondOperand] = useState(false);\r\n  const [operator, setOperator] = useState(\"\");\r\n\r\n  function calculate(\r\n    firstOperand: number,\r\n    secondOperand: number,\r\n    operator: string\r\n  ) {\r\n    if (operator === \"+\") {\r\n      return firstOperand + secondOperand;\r\n    }\r\n    if (operator === \"-\") {\r\n      return firstOperand - secondOperand;\r\n    }\r\n    if (operator === \"x\") {\r\n      return firstOperand * secondOperand;\r\n    }\r\n    if (operator === \"/\") {\r\n      return firstOperand / secondOperand;\r\n    }\r\n\r\n    return secondOperand;\r\n  }\r\n\r\n  function handleClear() {\r\n    if (operator && waitingForSecondOperand) {\r\n      setOperator(\"\");\r\n      setWaitingForSecondOperand(false);\r\n      setDisplayValue(firstOperand);\r\n    } else {\r\n      setDisplayValue(\"0\");\r\n    }\r\n  }\r\n\r\n  function handleClearAll() {\r\n    setDisplayValue(\"0\");\r\n    setFirstOperand(\"\");\r\n    setWaitingForSecondOperand(false);\r\n    setOperator(\"\");\r\n  }\r\n\r\n  function handleOperation(nextOperator: string) {\r\n    // `parseFloat` converts the string contents of `displayValue`\r\n    // to a floating-point number\r\n    const inputValue = parseFloat(displayValue);\r\n\r\n    // If the user whats to change the last operantor they entered\r\n    // The value of the operator property is replaced with the new operator and the function exits\r\n    if (operator && waitingForSecondOperand) {\r\n      setOperator(nextOperator);\r\n      return;\r\n    }\r\n\r\n    // verify that `firstOperand` is null and that the `inputValue` is not a `NaN` value\r\n    if (firstOperand === \"\" && !isNaN(inputValue)) {\r\n      // Update the firstOperand state\r\n      setFirstOperand(String(inputValue));\r\n    } else if (operator) {\r\n      // If the operator state has been assigned, in a previous action, the calculate function is invoked and\r\n      // the result is saved, than set to the display value and to the fist operand\r\n      let result = calculate(parseFloat(firstOperand), inputValue, operator);\r\n\r\n      // To a fixed number of decimal places,\r\n      // combine the parseFloat function with the Number.toFixed method\r\n      result = parseFloat(result.toFixed(7));\r\n\r\n      // If any operation would exceed the 8 digit maximum.\r\n      if (String(result).length > 8) {\r\n        setDisplayValue(\"ERR\");\r\n      } else {\r\n        setDisplayValue(String(result));\r\n        setFirstOperand(String(result));\r\n      }\r\n    }\r\n\r\n    // Set the state to mark that we expect the second operand now\r\n    setWaitingForSecondOperand(true);\r\n    // And set the next operator for the calculation\r\n    setOperator(nextOperator);\r\n  }\r\n\r\n  function handleDecimalPoint() {\r\n    // If digit represents a dot and If the `displayValue` state does not contain a decimal point\r\n    if (!displayValue.includes(\".\")) {\r\n      // Append the decimal point\r\n      setDisplayValue(displayValue + \".\");\r\n    }\r\n  }\r\n\r\n  function handleAddDigit(digit: string) {\r\n    if (waitingForSecondOperand === true) {\r\n      setDisplayValue(digit);\r\n      setWaitingForSecondOperand(false);\r\n    } else {\r\n      // Overwrite `displayValue` if the current value is '0' otherwise append to it\r\n      if (displayValue === \"0\") {\r\n        setDisplayValue(digit);\r\n      } else {\r\n        // Limit up to 8 digits long\r\n        if (displayValue.length < 8) setDisplayValue(displayValue + digit);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleChangeSign() {\r\n    const numberSignChanged = parseFloat(displayValue) * -1;\r\n    setDisplayValue(String(numberSignChanged));\r\n  }\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <Display value={displayValue} />\r\n      <Button className=\"button dark\" label=\"C\" onClick={handleClear} />\r\n      <Button className=\"button dark\" label=\"AC\" onClick={handleClearAll} />\r\n      <Button className=\"button dark\" label=\"+/-\" onClick={handleChangeSign} />\r\n      <Button\r\n        className=\"button operation\"\r\n        label=\"/\"\r\n        onClick={() => handleOperation(\"/\")}\r\n      />\r\n      <Button\r\n        className=\"button\"\r\n        label=\"7\"\r\n        onClick={() => handleAddDigit(\"7\")}\r\n      />\r\n      <Button\r\n        className=\"button\"\r\n        label=\"8\"\r\n        onClick={() => handleAddDigit(\"8\")}\r\n      />\r\n      <Button\r\n        className=\"button\"\r\n        label=\"9\"\r\n        onClick={() => handleAddDigit(\"9\")}\r\n      />\r\n      <Button\r\n        className=\"button operation\"\r\n        label=\"x\"\r\n        onClick={() => handleOperation(\"x\")}\r\n      />\r\n      <Button\r\n        className=\"button\"\r\n        label=\"4\"\r\n        onClick={() => handleAddDigit(\"4\")}\r\n      />\r\n      <Button\r\n        className=\"button\"\r\n        label=\"5\"\r\n        onClick={() => handleAddDigit(\"5\")}\r\n      />\r\n      <Button\r\n        className=\"button\"\r\n        label=\"6\"\r\n        onClick={() => handleAddDigit(\"6\")}\r\n      />\r\n      <Button\r\n        className=\"button operation\"\r\n        label=\"-\"\r\n        onClick={() => handleOperation(\"-\")}\r\n      />\r\n      <Button\r\n        className=\"button\"\r\n        label=\"1\"\r\n        onClick={() => handleAddDigit(\"1\")}\r\n      />\r\n      <Button\r\n        className=\"button\"\r\n        label=\"2\"\r\n        onClick={() => handleAddDigit(\"2\")}\r\n      />\r\n      <Button\r\n        className=\"button\"\r\n        label=\"3\"\r\n        onClick={() => handleAddDigit(\"3\")}\r\n      />\r\n      <Button\r\n        className=\"button operation\"\r\n        label=\"+\"\r\n        onClick={() => handleOperation(\"+\")}\r\n      />\r\n      <Button\r\n        className=\"button double\"\r\n        label=\"0\"\r\n        onClick={() => handleAddDigit(\"0\")}\r\n      />\r\n      <Button className=\"button\" label=\".\" onClick={handleDecimalPoint} />\r\n      <Button\r\n        className=\"button operation\"\r\n        label=\"=\"\r\n        onClick={() => handleOperation(\"=\")}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\n\nimport Calculator from \"./components/Calculator\";\n\nimport \"./assets/styles/global.css\";\n\nfunction App() {\n  return (\n    <>\n      <h1>Calculator App</h1>\n      <Calculator />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}